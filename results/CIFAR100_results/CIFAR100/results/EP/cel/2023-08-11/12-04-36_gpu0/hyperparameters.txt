main.py --model CNN --task CIFAR100 --data-aug --channels 128 256 512 1024 --kernels 3 3 3 3 --pools mmmm --strides 1 1 1 1 --paddings 1 1 1 0 --fc 100 --optim sgd --lrs 0.25 0.15 0.1 0.08 0.05 --wds 3e-4 3e-4 3e-4 3e-4 3e-4 --mmt 0.9 --lr-decay --epochs 120 --act my_hard_sig --todo train --T1 250 --T2 30 --mbs 128 --alg EP --thirdphase --betas 0.0 1.0 --loss cel --softmax --device 0 --save --seed 13 

- task: CIFAR100
- data augmentation (if CIFAR10): True
- learning rate decay: True
- scale for weight init: None
- activation: my_hard_sig
- learning rates: [0.25, 0.15, 0.1, 0.08, 0.05]
- weight decays: [0.0003, 0.0003, 0.0003, 0.0003, 0.0003]
- momentum (if sgd): 0.9
- optimizer: sgd
- loss: cel
- alg: EP
- minibatch size: 128
- T1: 250
- T2: 30
- betas: [0.0, 1.0]
- random beta_2 sign: False
- thirdphase: True
- softmax: True
- same update VFCNN: False
- epochs: 120
- seed: 13
- device: 0

Poolings : [MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False), MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False), MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False), MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)] 

P_CNN(
  (synapses): ModuleList(
    (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))
    (4): Linear(in_features=1024, out_features=100, bias=True)
  )
)
